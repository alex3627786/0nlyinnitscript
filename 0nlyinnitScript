local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera
local UserInputService = game:GetService("UserInputService")

local lockOn = false
local targetPlayer = nil

-- Function to detect and lock onto the closest player in front
local function getClosestPlayer()
    local closestDistance = math.huge
    local closestPlayer = nil

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local character = player.Character
            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
            local screenPoint, onScreen = Camera:WorldToScreenPoint(humanoidRootPart.Position)
            if onScreen then
                local mousePos = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
                local distance = (mousePos - Vector2.new(screenPoint.X, screenPoint.Y)).magnitude
                if distance < closestDistance then
                    closestDistance = distance
                    closestPlayer = player
                end
            end
        end
    end

    return closestPlayer
end

-- Function to lock onto the target player
local function lockOnTarget()
    if lockOn then
        targetPlayer = getClosestPlayer()
    else
        targetPlayer = nil
    end
end

-- Function to aim at the target player
local function aimAtTarget()
    if lockOn and targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("Head") then
        local head = targetPlayer.Character.Head
        Camera.CFrame = CFrame.new(Camera.CFrame.Position, head.Position)
    end
end

-- Create a GUI button to toggle lock-on
local ScreenGui = Instance.new("ScreenGui")
local Button = Instance.new("TextButton")

ScreenGui.Parent = game.CoreGui
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

Button.Parent = ScreenGui
Button.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
Button.BackgroundTransparency = 0.5
Button.BorderColor3 = Color3.fromRGB(255, 255, 255)
Button.Position = UDim2.new(0, 100, 0, 100)
Button.Size = UDim2.new(0, 200, 0, 50)
Button.Font = Enum.Font.SourceSans
Button.Text = "Toggle Lock On"
Button.TextColor3 = Color3.fromRGB(255, 255, 255)
Button.TextSize = 24

Button.MouseButton1Click:Connect(function()
    lockOn = not lockOn
    lockOnTarget()
    if lockOn then
        Button.Text = "Unlock"
    else
        Button.Text = "Lock On"
    end
end)

-- Make the button draggable
local dragging = false
local dragInput, dragStart, startPos

local function update(input)
    local delta = input.Position - dragStart
    Button.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

Button.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = Button.Position

        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
            dragging = false
            end
        end)
    end
end)

Button.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        dragInput = input
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        update(input)
    end
end)

-- Connect the aiming function to the render step
game:GetService("RunService").RenderStepped:Connect(aimAtTarget)
